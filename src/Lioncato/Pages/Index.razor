@page "/"

@using Data
@using Microsoft.EntityFrameworkCore

@inherits AbstractComponentBase

<PageTitle>Lioncato</PageTitle>

<div class="@AppClass.FadeIn container">
    <RadzenCard>
        <h2>Lioncato</h2>
        <div Class="mb-2 row">
            <div Class="col-6 p-0">
                @if (IsSignedIn)
                {
                    <RadzenButton Click="@AddAsync" Text="Add" />
                }
            </div>
            <div Class="col-6 p-0">
                <RadzenTextBox @bind-Value="Keyword" Class="w-100" @oninput="(args) => SimpleSearch(args.Value)" Placeholder="Search..." />
            </div>
        </div>
        <hr>
        <RadzenDataGrid TItem="LocationInfo" AllowColumnResize="true" AllowPaging="true" AllowSorting="true" Class="rz-selectable" Data="@Locations" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true">
            <Columns>
                <RadzenDataGridColumn TItem="LocationInfo" Property="Name" Title="Name">
                    <Template Context="data">
                        <a Class="pointer" @onclick="() => EditAsync(data)" Style="line-height: 40px;">@data.Name</a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="LocationInfo" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                    <Template Context="data">
                        @if (!string.IsNullOrEmpty(data.AppleMapsUrl))
                        {
                            <a Href="@data.AppleMapsUrl" Target="_blank">
                                <RadzenImage Path="https://image.twodo.app/icons/apple-maps.png" Style="width: 40px; height: 40px; border-radius: 8px;" />
                            </a>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="LocationInfo" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                    <Template Context="data">
                        @if (!string.IsNullOrEmpty(data.GoogleMapsUrl))
                        {
                            <a Href="@data.GoogleMapsUrl" Target="_blank">
                                <RadzenImage Path="https://image.twodo.app/icons/google-maps.png" Style="width: 40px; height: 40px; border-radius: 8px;" />
                            </a>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
</div>

@code {

    protected List<LocationInfo> AllLocations = new List<LocationInfo>();
    protected LocationInfo Location = new LocationInfo();
    protected List<LocationInfo> Locations = new List<LocationInfo>();

    protected override async Task OnInitializedAsync()
    {
        await InitLocationsAsync();
    }

    protected async Task AddAsync()
    {
        Location = new LocationInfo(string.Empty);
        await OpenLocation();
    }

    protected async Task DeleteAsync(LocationInfo value)
    {
        SetLoading(true);
        using var context = await DbFactory.CreateDbContextAsync();
        var locations = context.Locations.Where(x => x.Id == value.Id);
        foreach (var l in locations)
        {
            context.Locations.Remove(l);
        }
        await context.SaveChangesAsync();
        AllLocations = AllLocations.Where(x => x.Id != value.Id).ToList();
        SimpleSearch(Keyword);
        SetLoading(false);
    }

    protected async Task EditAsync(LocationInfo value)
    {
        if (!IsSignedIn)
        {
            return;
        }
        Location = value with { };
        await OpenLocation();
    }

    protected async Task InitLocationsAsync()
    {
        SetLoading(true);
        using var context = await DbFactory.CreateDbContextAsync();
        Locations = await context.Locations.ToListAsync();
        if (!IsSignedIn)
        {
            Locations = Locations.Where(x => x.IsPublic).ToList();
        }
        AllLocations = Locations;
        SetLoading(false);
    }

    public async Task OpenLocation()
    {
        ActionInfo<LocationInfo> rs = await Dialog.OpenAsync<LocationForm>("Info",
        new Dictionary<string, object>
        {
{ "Location", Location },
        },
        new DialogOptions
        {
            Draggable = true,
            Resizable = true,
        });
        if (rs is not null)
        {
            if (rs.Type == ActionType.Save)
            {
                await SaveAsync(rs.Result);
            }
            else if (rs.Type == ActionType.Delete)
            {
                await DeleteAsync(rs.Result);
            }
        }
    }

    protected async Task SaveAsync(LocationInfo value)
    {
        try
        {
            SetLoading(true);
            using var context = await DbFactory.CreateDbContextAsync();
            var id = value.Id;
            var location = new LocationInfo();
            if (string.IsNullOrEmpty(id))
            {
                await context.Locations.AddAsync(location);
            }
            else
            {
                location = await context.Locations.FirstOrDefaultAsync(x => x.Id == id);
                if (location is null)
                {
                    await AlertAsync("That location doesn't exist.");
                    SetLoading(false);
                    return;
                }
            }
            location.AppleMapsUrl = value.AppleMapsUrl;
            location.GoogleMapsUrl = value.GoogleMapsUrl;
            location.IsPublic = value.IsPublic;
            location.Name = value.Name;
            await context.SaveChangesAsync();

            AllLocations = AllLocations.Where(x => x.Id != id).ToList();
            AllLocations.Insert(0, location);
            Location = new LocationInfo(string.Empty);
            SimpleSearch(Keyword);
            SetLoading(false);
        }
        catch (Exception ex)
        {
            await ErrorAsync(ex);
        }
    }

    protected void SimpleSearch(object? value)
    {
        var keyword = $"{value}".ToUpper();
        Locations = AllLocations.Where(x => $"{x.Name}".ToUpper().Contains(keyword)).ToList();
    }
}